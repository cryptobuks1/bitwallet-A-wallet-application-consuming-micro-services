authserver:
# The OAuth2 server definition that would be used to send the authorization requests to
    hostname: localhost
    port: 8899
    contextPath: userauth

# Define settings for Single-Sign-On with OAuth2; this means that we need to relay the OAuth token
# to the subsequent resources that are proxied by the Zuul api gateway.

# The home definition tells us to allow anonymous access (secure: false) to the static resources that
# are accessed through the Zuul proxy.

# Remaining properties are used by the OAuth2 SSO to determine where the authorization server is and
# what client crendentials to use to access that server.
security:
  user:
    password: none
  oauth2:
    client:
      accessTokenUri: http://${authserver.hostname}:${authserver.port}/${authserver.contextPath}/oauth/token
      userAuthorizationUri: http://${authserver.hostname}:${authserver.port}/${authserver.contextPath}/oauth/authorize
      clientId: acme
      clientSecret: acmesecret
      registered-redirect-uri: http://localhost:8765/login
      pre-established-redirect-uri: http://localhost:8765/login
      use-current-uri: false
    resource:
      jwt:
        keyValue: |
          -----BEGIN PUBLIC KEY-----
          MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEArKyPuETRdRKAaRfoPtaWbYGcXnv9kJ8Ws6HTaKqwTvU3uh+FWSxI15uioAAGBbfZrVIxHjyICMYS8g/9dNfhXelZZoezuH+u3OsND6IStoG4Oydz+/ERN9mKFk92eCg0OfBmniH/GQPBfa1GqYHRWBOSzyBMpu532I6GsL4dsMS+/BOwOu+bQrxBFh6I2z0jO36r4O1yKV7OKRDxEMR2X7u4S7UPFmbRop306utd1gYUYkUhzyCkom5Ut5FFkWEmXobZRv7ZkY1kZvA5y3rZClW3hflw17zAl5qgfBxSRs4Xi9c2zKzUhbp6h9wbOrM0K4Ve147Tlmogj22tyQb/zwIDAQAB
          -----END PUBLIC KEY-----
# Define the port where the API gateway server would be running
server:
  port: 8765

# Define the routes which determine what URL are serviced by what applications.
# The application/services are defined in the bootstrap.yml file of individual applications
# using the spring.application.name property.

# Note that we don't proxy the calls to the authorization server. The reason being that
# Spring cloud security would need to secure the api gateway before it can route the
# requests using zuul
zuul:
  ignoredServices: '*'
  routes:
    account-service:
      path: /account-service/**
      stripPrefix: false
      serviceId: account-service
      sensitiveHeaders:
    transaction-service:
      path: /transaction-service/**
      stripPrefix: false
      serviceId: transaction-service
      sensitiveHeaders:
    user:
      path: /api/loggedinuser/**
      stripPrefix: true
      url: http://${authserver.hostname}:${authserver.port}/${authserver.contextPath}/
    ui:
      path: /**
      stripPrefix: false
      serviceId: web-portal

# Since our gateway is using Eureka (@EnableEurekaClient), the Gateway using Netfix Ribbon to make
# the actual call. The ribbon call is wrapped within Hystrix so that we can handle any errors.
# Hystrix has low delay tolerance threshold and hence we bump it to 5 seconds.
hystrix:
  command:
    default:
      execution:
        isolation:
          strategy: SEMAPHORE
          semaphore:
            timeoutInMilliseconds: 5000

# Define the Eureka server that handles service registration
eureka:
  client:
    serviceUrl:
      defaultZone: http://localhost:8761/eureka/